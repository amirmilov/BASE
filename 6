// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

contract GarageManager {
    // Public mapping to store a list of cars for each user
    mapping(address => Car[]) public garage;

    // Struct to represent a car
    struct Car {
        string make;
        string model;
        string color;
        uint numberOfDoors;
    }

    // Custom error for invalid car index
    error BadCarIndex(uint index);

    /**
     * @dev Adds a new car to the sender's garage
     * @param _make The make of the car
     * @param _model The model of the car
     * @param _color The color of the car
     * @param _numberOfDoors Number of doors on the car
     */
    function addCar(string calldata _make, string calldata _model, string calldata _color, uint _numberOfDoors) external {
        // Create a new Car instance and add it to the sender's garage
        garage[msg.sender].push(Car(_make, _model, _color, _numberOfDoors));
    }

    /**
     * @dev Retrieves all cars in the sender's garage
     * @return Array of `Car` structs
     */
    function getMyCars() external view returns (Car[] memory) {
        return garage[msg.sender];
    }

    /**
     * @dev Retrieves all cars for a specific user
     * @param _user The address of the user
     * @return Array of `Car` structs
     */
    function getUserCars(address _user) external view returns (Car[] memory) {
        return garage[_user];
    }

    /**
     * @dev Updates a specific car in the sender's garage
     * @param _index The index of the car to update
     * @param _make The updated make of the car
     * @param _model The updated model of the car
     * @param _color The updated color of the car
     * @param _numberOfDoors The updated number of doors on the car
     */
    function updateCar(uint _index, string calldata _make, string calldata _model, string calldata _color, uint _numberOfDoors) external {
        // Check if the provided index is valid for the sender's garage
        if (_index >= garage[msg.sender].length) {
            revert BadCarIndex(_index);
        }
        
        // Update the specified car
        garage[msg.sender][_index] = Car(_make, _model, _color, _numberOfDoors);
    }

    /**
     * @dev Deletes all cars from the sender's garage
     */
    function resetMyGarage() public {
        delete garage[msg.sender];
    }
}
