// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

// Importing OpenZeppelin contracts for ERC20 and EnumerableSet functionalities
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

// Contract for weighted voting using ERC20 token
contract WeightedVoting is ERC20 {
    using EnumerableSet for EnumerableSet.AddressSet; // Importing EnumerableSet for address set functionality

    // Private string variables
    string private salt = "gedt";
    string private anotherSalt = "any";

    // Custom errors for various conditions
    error TokensClaimed();          // Error for attempting to claim tokens again
    error AllTokensClaimed();       // Error for attempting to claim tokens when all are claimed
    error NoTokensHeld();           // Error for attempting an action without holding tokens
    error QuorumTooHigh();          // Error for setting a quorum higher than the total supply
    error AlreadyVoted();           // Error for attempting to vote more than once
    error VotingClosed();           // Error for attempting to vote on a closed issue

    // Struct to represent a voting issue
    struct Issue {
        EnumerableSet.AddressSet voters;  // Set of addresses that have voted
        string issueDesc;                 // Description of the issue
        uint256 quorum;                   // Required quorum to close the issue
        uint256 totalVotes;               // Total number of votes cast
        uint256 votesFor;                 // Total number of votes in favor
        uint256 votesAgainst;             // Total number of votes against
        uint256 votesAbstain;             // Total number of abstained votes
        bool passed;                      // Flag indicating if the issue passed
        bool closed;                      // Flag indicating if the issue is closed
    }

    // Struct for serialized issue data to be returned
    struct SerializedIssue {
        address[] voters;           // Array of voters
        string issueDesc;           // Description of the issue
        uint256 quorum;             // Required quorum to close the issue
        uint256 totalVotes;         // Total number of votes cast
        uint256 votesFor;           // Total number of votes in favor
        uint256 votesAgainst;       // Total number of votes against
        uint256 votesAbstain;       // Total number of abstained votes
        bool passed;                // Flag indicating if the issue passed
        bool closed;                // Flag indicating if the issue is closed
    }

    // Enum for different vote options
    enum Vote {
        AGAINST,
        FOR,
        ABSTAIN
    }

    // Storage for all issues
    Issue[] internal issues;

    // Mapping to track token claims by address
    mapping(address => bool) public tokensClaimed;

    // Constants for token management
    uint256 public maxSupply = 1_000_000; // Maximum token supply
    uint256 public claimAmount = 100;     // Number of tokens to be claimed

    // Constructor to initialize ERC20 token with a name and symbol
    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {
        issues.push(); // Initial empty issue to start from index 1
    }

    // Function to claim tokens for the caller
    function claim() public {
        // Check if all tokens have been claimed
        if (totalSupply() + claimAmount > maxSupply) {
            revert AllTokensClaimed();
        }
        // Check if the caller has already claimed tokens
        if (tokensClaimed[msg.sender]) {
            revert TokensClaimed();
        }
        // Mint tokens to the caller
        _mint(msg.sender, claimAmount);
        tokensClaimed[msg.sender] = true; // Mark tokens as claimed
    }

    // Function to create a new voting issue
    function createIssue(string calldata _issueDesc, uint256 _quorum) external returns (uint256) {
        // Check if the caller holds any tokens
        if (balanceOf(msg.sender) == 0) {
            revert NoTokensHeld();
        }
        // Check if the specified quorum exceeds the total supply
        if (_quorum > totalSupply()) {
            revert QuorumTooHigh();
        }
        // Create a new issue and initialize values
        Issue storage newIssue = issues.push();
        newIssue.issueDesc = _issueDesc;
        newIssue.quorum = _quorum;
        return issues.length - 1;
    }

    // Function to get details of a voting issue
    function getIssue(uint256 _issueId) external view returns (SerializedIssue memory) {
        Issue storage issue = issues[_issueId];
        return SerializedIssue({
            voters: issue.voters.values(),
            issueDesc: issue.issueDesc,
            quorum: issue.quorum,
            totalVotes: issue.totalVotes,
            votesFor: issue.votesFor,
            votesAgainst: issue.votesAgainst,
            votesAbstain: issue.votesAbstain,
            passed: issue.passed,
            closed: issue.closed
        });
    }

    // Function to cast a vote on a voting issue
    function vote(uint256 _issueId, Vote _vote) public {
        Issue storage issue = issues[_issueId];

        // Ensure the issue is still open for voting
        if (issue.closed) {
            revert VotingClosed();
        }
        // Check if the caller has already voted
        if (issue.voters.contains(msg.sender)) {
            revert AlreadyVoted();
        }

        uint256 voterTokens = balanceOf(msg.sender);
        // Check if the caller holds any tokens
        if (voterTokens == 0) {
            revert NoTokensHeld();
        }

        // Tally votes based on the option selected
        if (_vote == Vote.AGAINST) {
            issue.votesAgainst += voterTokens;
        } else if (_vote == Vote.FOR) {
            issue.votesFor += voterTokens;
        } else {
            issue.votesAbstain += voterTokens;
        }

        // Add the caller to the list of voters and update total votes
        issue.voters.add(msg.sender);
        issue.totalVotes += voterTokens;

        // Close the issue if quorum is met and check if it passed
        if (issue.totalVotes >= issue.quorum) {
            issue.closed = true;
            issue.passed = issue.votesFor > issue.votesAgainst;
        }
    }
}
