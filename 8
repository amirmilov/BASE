                                                                                    1

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

library SillyStringUtils {

    struct Haiku {
        string line1;
        string line2;
        string line3;
    }

    function shruggie(string memory _input) internal pure returns (string memory) {
        return string.concat(_input, unicode" ðŸ¤·");
    }
}


                                                                                                                          2


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

// Importing the SillyStringUtils library
import "./8.sol";

contract ImportsExercise {
    // Public instance of Haiku
    SillyStringUtils.Haiku public haiku;

    /**
     * @dev Save a new Haiku with three provided lines
     * @param _line1 The first line of the haiku
     * @param _line2 The second line of the haiku
     * @param _line3 The third line of the haiku
     */
    function saveHaiku(string memory _line1, string memory _line2, string memory _line3) public {
        haiku = SillyStringUtils.Haiku(_line1, _line2, _line3);
    }

    /**
     * @dev Retrieve the stored Haiku as a Haiku struct
     * @return The stored Haiku struct with lines
     */
    function getHaiku() public view returns (SillyStringUtils.Haiku memory) {
        return haiku;
    }

    /**
     * @dev Returns a modified version of the Haiku with a "shruggie" appended to line3
     * @return A modified Haiku struct with ðŸ¤· at the end of line3
     */
    function shruggieHaiku() public view returns (SillyStringUtils.Haiku memory) {
        // Create a modified copy of the haiku with the shruggie
        return SillyStringUtils.Haiku(
            haiku.line1,
            haiku.line2,
            SillyStringUtils.shruggie(haiku.line3)
        );
    }
}
